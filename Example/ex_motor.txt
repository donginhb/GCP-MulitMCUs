

/*****************************************************************************
 * 主轴电机线程接口
 ****************************************************************************/

//主轴电机运行状态定义
#define WB01_MOTOR_STATUS_STOP      (0) //停止
#define WB01_MOTOR_STATUS_CW        (1) //正转
#define WB01_MOTOR_STATUS_ACW       (2) //反转
#define WB01_MOTOR_STATUS_ESTOP     (3) //刹车

#define MAIN_AXIS_GRID_TIMEROVER    (3000)      //单格超时时间

static uBit8 m_uCurMotorStatus = 0; //当前主轴电机状态


/**
  * @brief  主轴电机状态设置
  * @param  uMotorStatus:
  *     @arg WB01_MOTOR_STATUS_STOP   停止
  *     @arg WB01_MOTOR_STATUS_CW     正转
  *     @arg WB01_MOTOR_STATUS_ACW    反转
  *     @arg WB01_MOTOR_STATUS_ESTOP  刹车
  * @retval None
  * @Note   禁止在同一时间内,出现A/B都为高的情况.由于IO操作的异步性(设置IO寄存器后,
  *         需要一定时间才会发生电平变化),所以在改变IO电平后,需要等待其电平发生实
  *         际改变后才执行一下步的操作,以避免这种情况出现;
  *         除此之外,必须先执行拉低电平的操作,再执行拉高电平的操作;
  */
void WB01_SetMainAxisMotorStatus(uBit8 uMotorStatus)
{
    switch (uMotorStatus)
    {
    case WB01_MOTOR_STATUS_STOP:
        m_uCurMotorStatus = uMotorStatus;
        GPIO_SetOutputState(OUTPUT_IO_MAIN_AXIS_A, false); 
        while (GPIO_GetOutputState(OUTPUT_IO_MAIN_AXIS_A) != false);
        GPIO_SetOutputState(OUTPUT_IO_MAIN_AXIS_B, false); 
        while (GPIO_GetOutputState(OUTPUT_IO_MAIN_AXIS_B) != false);
        GPIO_SetOutputState(OUTPUT_IO_MAIN_AXIS_S, false); 
        while (GPIO_GetOutputState(OUTPUT_IO_MAIN_AXIS_S) != false);
        break;
    case WB01_MOTOR_STATUS_CW: 
        m_uCurMotorStatus = uMotorStatus;
        GPIO_SetOutputState(OUTPUT_IO_MAIN_AXIS_B, false); 
        while (GPIO_GetOutputState(OUTPUT_IO_MAIN_AXIS_B) != false);
        GPIO_SetOutputState(OUTPUT_IO_MAIN_AXIS_S, false); 
        while (GPIO_GetOutputState(OUTPUT_IO_MAIN_AXIS_S) != false);
        GPIO_SetOutputState(OUTPUT_IO_MAIN_AXIS_A, true); 
        //while (GPIO_GetOutputState(OUTPUT_IO_MAIN_AXIS_A) != true);
        break;
    case WB01_MOTOR_STATUS_ACW: 
        m_uCurMotorStatus = uMotorStatus;
        GPIO_SetOutputState(OUTPUT_IO_MAIN_AXIS_A, false); 
        while (GPIO_GetOutputState(OUTPUT_IO_MAIN_AXIS_A) != false);
        GPIO_SetOutputState(OUTPUT_IO_MAIN_AXIS_S, false); 
        while (GPIO_GetOutputState(OUTPUT_IO_MAIN_AXIS_S) != false);
        GPIO_SetOutputState(OUTPUT_IO_MAIN_AXIS_B, true); 
        //while (GPIO_GetOutputState(OUTPUT_IO_MAIN_AXIS_B) != true);
        break;
    case WB01_MOTOR_STATUS_ESTOP: 
        m_uCurMotorStatus = uMotorStatus;
        GPIO_SetOutputState(OUTPUT_IO_MAIN_AXIS_A, false); 
        while (GPIO_GetOutputState(OUTPUT_IO_MAIN_AXIS_A) != false);
        GPIO_SetOutputState(OUTPUT_IO_MAIN_AXIS_B, false); 
        while (GPIO_GetOutputState(OUTPUT_IO_MAIN_AXIS_B) != false);
        GPIO_SetOutputState(OUTPUT_IO_MAIN_AXIS_S, true); 
        //while (GPIO_GetOutputState(OUTPUT_IO_MAIN_AXIS_S) != true);
        break;
        
    default: break;
    }
    
}


/**
  * @brief  主轴电机状态获取
  * @param  uMotorStatus: 0-停止 1-正转 2-反转 3-刹车
  * @retval 电机状态
  *     @arg WB01_MOTOR_STATUS_STOP   停止
  *     @arg WB01_MOTOR_STATUS_CW     正转
  *     @arg WB01_MOTOR_STATUS_ACW    反转
  *     @arg WB01_MOTOR_STATUS_ESTOP  刹车
  */
uBit8 WB01_GetMainAxisMotorStatus(void)
{
    
    return m_uCurMotorStatus;
}